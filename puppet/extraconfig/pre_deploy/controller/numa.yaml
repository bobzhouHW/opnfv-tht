heat_template_version: 2015-04-30

description: Controller node hieradata for NUMA configuration

parameters:
  server:
    description: ID of the controller node to apply this config to
    type: string
  DpdkPmdDriver:
    description: Driver to use to bind dpdk NIC
    type: string
    default: "uio_pci_generic"
  FdioEnabled:
    description: Whether to configure vpp/fdio
    type: boolean
    default: false
  ControllerPublicNIC:
    description: Logical NIC used for public network
    type: string
    default: false
  ControllerTenantNIC:
    description: Logical NIC used for tenant network
    type: string
    default: false

resources:
  ControllerNumaConfig:
    type: OS::Heat::StructuredConfig
    properties:
      group: os-apply-config
      config:
        hiera:
          datafiles:
            numa:
              mapped_data:
                dpdk_pmd_type: {get_input: dpdk_pmd_type}
                fdio_enabled: {get_input: fdio_enabled}
                fdio::params::dpdk_pmd_type: {get_input: dpdk_pmd_type}
                public_nic: {get_input: public_nic}
                tenant_nic: {get_input: tenant_nic}

  ControllerNumaDeployment:
    type: OS::Heat::StructuredDeployment
    properties:
      config: {get_resource: ControllerNumaConfig}
      server: {get_param: server}
      input_values:
        dpdk_pmd_type: {get_param: DpdkPmdDriver}
        fdio_enabled: {get_param: FdioEnabled}
        public_nic: {get_param: ControllerPublicNIC}
        tenant_nic: {get_param: ControllerTenantNIC}

  ControllerNumaPuppetConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      config:
        get_file: manifests/dpdk_dataplanes.pp

  ControllerNumaPuppetDeployment:
    depends_on: ControllerNumaDeployment
    type: OS::Heat::StructuredDeployment
    properties:
      server: {get_param: server}
      config: {get_resource: ControllerNumaPuppetConfig}

outputs:
  deploy_stdout:
    description: Output of the extra hiera data deployment
    value: {get_attr: [ControllerNumaDeployment, deploy_stdout]}
